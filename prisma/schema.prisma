generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Measurement {
  id               Int                 @id @default(autoincrement())
  name             String              @unique
  category         MeasurementCategory
  Disposable       Disposable[]
  Input            Input[]
  CocktailInput    CocktailInput[]
  BudgetDisposable BudgetDisposable[]
}

model EventCategory {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  Budget Budget[]
}

model Budget {
  id         Int           @id @default(autoincrement())
  guests     Int
  customerId Int
  categoryId Int
  customers  Customer      @relation(fields: [customerId], references: [id])
  categories EventCategory @relation(fields: [categoryId], references: [id])

  BudgetCocktail   BudgetCocktail[]
  BudgetCost       BudgetCost[]
  BudgetDisposable BudgetDisposable[]
  @@map("budgets")
}

model BudgetCost {
  id       Int    @id @default(autoincrement())
  budgetId Int
  costId   Int
  budgets  Budget @relation(fields: [budgetId], references: [id])
  costs    Cost   @relation(fields: [costId], references: [id])

  @@map("budget_costs")
}

model BudgetCocktail {
  id         Int      @id @default(autoincrement())
  budgetId   Int
  budgets    Budget   @relation(fields: [budgetId], references: [id])
  cocktailId Int
  cocktails  Cocktail @relation(fields: [cocktailId], references: [id])
  quantity   Int

  @@map("budgets_cocktails")
}

model BudgetDisposable {
  id            Int         @id @default(autoincrement())
  budgetId      Int
  budgets       Budget      @relation(fields: [budgetId], references: [id])
  disposableId  Int
  disposables   Disposable  @relation(fields: [disposableId], references: [id])
  quantity      Int
  measurementId Int
  measurement   Measurement @relation(fields: [measurementId], references: [id])

  @@map("budgets_disposables")
}

model InputCategory {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  Input Input[]
}

model CocktailInput {
  id            Int         @id @default(autoincrement())
  inputId       Int
  cocktailId    Int
  quantity      Int
  measurementId Int
  measurement  Measurement @relation(fields: [measurementId], references: [id])
  cocktails     Cocktail    @relation(fields: [cocktailId], references: [id])
  inputs        Input       @relation(fields: [inputId], references: [id])

  @@map("cocktailInputs")
}

model Cocktail {
  id             Int             @id @default(autoincrement())
  name           String          @unique @db.VarChar(255)
  cocktailInputs CocktailInput[]

  BudgetCocktail BudgetCocktail[]
  @@map("cocktails")
}

model Cost {
  id       Int             @id @default(autoincrement())
  name     String          @unique @db.VarChar(255)
  price    Int
  category CostsCategories

  BudgetCost BudgetCost[]
  @@map("costs")
}

model Customer {
  id       Int      @id @default(autoincrement())
  name     String   @db.VarChar(255)
  email    String   @unique @db.VarChar(255)
  phone    String?  @db.VarChar(11)
  password String   @db.VarChar(255)
  budgets  Budget[]

  @@map("customers")
}

model Disposable {
  id            Int         @id @default(autoincrement())
  name          String      @unique @db.VarChar(255)
  price         Int
  measurementId Int
  measurement   Measurement @relation(fields: [measurementId], references: [id])

  BudgetDisposable BudgetDisposable[]
  @@map("disposables")
}

model Input {
  id             Int             @id @default(autoincrement())
  name           String          @unique @db.VarChar(255)
  price          Int
  categoryId     Int
  measurement    Measurement     @relation(fields: [measurementId], references: [id])
  cocktailInputs CocktailInput[]

  category      InputCategory @relation(fields: [categoryId], references: [id])
  measurementId Int
  @@map("inputs")
}

enum MeasurementCategory {
  mass
  volume
  unit
}

enum CostsCategories {
  staff
  variable
  operationals
}
